{"version":3,"sources":["../../../../server/modules/users/models/userModel.js"],"names":["database","require","cors","jwt","process","env","SECRET_KEY","UserModel","executeQuery","req","Promise","resolve","reject","appData","query","body","console","log","connection","err","rows","JSON","stringify","error","registerUser","res","today","Date","userData","email","first_name","last_name","password","phoneNumber","fields","loginUser","dbResponse","length","token","sign","expiresIn","isAdmin","isadmin","getUser"],"mappings":";;;;;;;;AAAA,IAAIA,WAAWC,QAAQ,iCAAR,CAAf;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;AACA,IAAIE,MAAMF,QAAQ,cAAR,CAAV;AACAG,QAAQC,GAAR,CAAYC,UAAZ,GAAyB,QAAzB;;IAEMC,S;;;SAEFC,Y,GAAe,UAACC,GAAD;AAAA,eAAS,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AACnD,gBAAIC,UAAU;AACV,yBAAS,CADC;AAEV,wBAAQ,EAFE;AAGV,0BAAS,EAHC;AAIV,0BAAS,EAJC;AAKV,0BAAS,EALC;AAMV,6BAAY;AANF,aAAd;AAQA,gBAAIC,QAAQL,IAAIM,IAAJ,CAASD,KAArB;AACAE,oBAAQC,GAAR,CAAY,cAAYH,KAAxB;AACAd,qBAASkB,UAAT,CAAoBJ,KAApB,CAA0BA,KAA1B,EAAiC,UAASK,GAAT,EAAcC,IAAd,EAAoB;AACjD,oBAAI,CAACD,GAAL,EAAU;AACNH,4BAAQC,GAAR,CAAY,8CAA4CI,KAAKC,SAAL,CAAeF,IAAf,CAAxD;AACAP,4BAAQU,KAAR,GAAgB,CAAhB;AACAV,4BAAQ,QAAR,IAAoB,UAApB;AACAA,4BAAQ,WAAR,IAAuB,GAAvB;AACAA,4BAAQ,QAAR,IAAoBO,IAApB;AACAT,4BAAQE,OAAR;AACA;AACH,iBARD,MAQO;AACHG,4BAAQC,GAAR,CAAY,qBAAmBE,GAA/B;AACAN,4BAAQ,MAAR,IAAkB,gBAAlB;AACAA,4BAAQ,WAAR,IAAuB,GAAvB;AACAA,4BAAQ,KAAR,IAAiBM,GAAjB;AACAP,2BAAOC,OAAP;AACA;AACH;AACJ,aAjBD;AAkBP,SA7B2B,CAAT;AAAA,K;;SAgCfW,Y,GAAc,UAACf,GAAD,EAAMgB,GAAN;AAAA,eAAc,IAAIf,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AACvD,gBAAIc,QAAQ,IAAIC,IAAJ,EAAZ;AACA,gBAAId,UAAU;AACV,yBAAS,CADC;AAEV,wBAAQ,EAFE;AAGV,6BAAY,EAHF;AAIV,8BAAa;AAJH,aAAd;AAMA,gBAAIe,WAAU,CAACnB,IAAIM,IAAJ,CAASc,KAAV,EAAiBpB,IAAIM,IAAJ,CAASe,UAA1B,EAAsCrB,IAAIM,IAAJ,CAASgB,SAA/C,EAA0DtB,IAAIM,IAAJ,CAASiB,QAAnE,EAA6EvB,IAAIM,IAAJ,CAASkB,WAAtF,CAAd;AACAjC,qBAASkB,UAAT,CAAoBJ,KAApB,CAA0B,iGAA1B,EAA6Hc,QAA7H,EAAuI,UAAST,GAAT,EAAcC,IAAd,EAAoBc,MAApB,EAA4B;AAC/J,oBAAI,CAACf,GAAL,EAAU;AACNH,4BAAQC,GAAR,CAAY,2BAAyBG,IAArC;AACAP,4BAAQU,KAAR,GAAgB,CAAhB;AACAV,4BAAQ,MAAR,IAAkB,+BAAlB;AACAA,4BAAQ,WAAR,IAAuBO,IAAvB;AACAP,4BAAQ,YAAR,IAAwB,GAAxB;AACAF,4BAAQE,OAAR;AACA;AACH,iBARD,MAQO;AACHG,4BAAQC,GAAR,CAAY,eAAaE,GAAzB;AACAN,4BAAQ,MAAR,IAAkB,gBAAlB;AACAA,4BAAQ,WAAR,IAAuB,GAAvB;AACAA,4BAAQU,KAAR,GAAgBJ,GAAhB;AACAP,2BAAOC,OAAP;AACA;AACH;AACJ,aAjBD;AAkBH,SA3B2B,CAAd;AAAA,K;;SA6BdsB,S,GAAY,UAAC1B,GAAD,EAAMgB,GAAN;AAAA,eAAc,IAAIf,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvD,gBAAIC,UAAU;AACV,yBAAS,CADC;AAEV,wBAAQ,EAFE;AAGV,6BAAY;AAHF,aAAd;AAKA,gBAAIgB,QAAQpB,IAAIM,IAAJ,CAASc,KAArB;AACA,gBAAIG,WAAWvB,IAAIM,IAAJ,CAASiB,QAAxB;AACAhB,oBAAQC,GAAR,CAAY,aAAWI,KAAKC,SAAL,CAAeb,IAAIM,IAAnB,CAAvB;AACAf,qBAASkB,UAAT,CAAoBJ,KAApB,CAA0B,sCAA1B,EAAkE,CAACe,KAAD,CAAlE,EAA2E,UAASV,GAAT,EAAciB,UAAd,EAA0BF,MAA1B,EAAkC;AACzG,oBAAIf,GAAJ,EAAS;AACLH,4BAAQC,GAAR,CAAY,WAAZ;AACAD,4BAAQC,GAAR,CAAYE,GAAZ;AACAN,4BAAQU,KAAR,GAAgB,CAAhB;AACAV,4BAAQ,MAAR,IAAkB,gBAAlB;AACAA,4BAAQ,OAAR,IAAmBM,GAAnB;AACAN,4BAAQ,WAAR,IAAuB,GAAvB;AACAD,2BAAOC,OAAP;AACA;AACH,iBATD,MASO;AACHG,4BAAQC,GAAR,CAAY,cAAZ;AACA,wBAAIG,OAAOgB,WAAWhB,IAAtB;AACAJ,4BAAQC,GAAR,CAAYG,IAAZ;AACA,wBAAIA,KAAKiB,MAAL,GAAc,CAAlB,EAAqB;AACjBrB,gCAAQC,GAAR,CAAY,iBAAZ;AACA,4BAAIG,KAAK,CAAL,EAAQY,QAAR,IAAoBA,QAAxB,EAAkC;AAC9BhB,oCAAQC,GAAR,CAAY,iBAAZ;AACAD,oCAAQC,GAAR,CAAY,aAAWI,KAAKC,SAAL,CAAeF,KAAK,CAAL,CAAf,CAAvB;AACA,gCAAIkB,QAAQnC,IAAIoC,IAAJ,CAASnB,KAAK,CAAL,CAAT,EAAkBhB,QAAQC,GAAR,CAAYC,UAA9B,EAA0C;AAClDkC,2CAAW;AADuC,6BAA1C,CAAZ;AAGA3B,oCAAQU,KAAR,GAAgB,CAAhB;AACAV,oCAAQ4B,OAAR,GAAkBrB,KAAK,CAAL,EAAQsB,OAA1B;AACA7B,oCAAQ,OAAR,IAAmByB,KAAnB;AACAzB,oCAAQ,WAAR,IAAuB,GAAvB;AACAF,oCAAQE,OAAR;AACA;AACH,yBAZD,MAYO;AACHG,oCAAQC,GAAR,CAAY,qBAAZ;AACAJ,oCAAQU,KAAR,GAAgB,CAAhB;AACAV,oCAAQ,MAAR,IAAkB,mCAAlB;AACAA,oCAAQ,WAAR,IAAuB,GAAvB;AACAD,mCAAOC,OAAP;AACA;AACH;AACJ,qBAtBD,MAsBO;AACHG,gCAAQC,GAAR,CAAY,OAAZ;AACAJ,gCAAQU,KAAR,GAAgB,CAAhB;AACAV,gCAAQ,MAAR,IAAkB,wBAAlB;AACAA,gCAAQ,WAAR,IAAuB,GAAvB;AACAD,+BAAOC,OAAP;AACA;AACH;AACJ;AACJ,aA7CD;AA+CH,SAxDyB,CAAd;AAAA,K;;SA0DZ8B,O,GAAU,UAAClC,GAAD,EAAMgB,GAAN;AAAA,eAAc,IAAIf,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrD,gBAAIC,UAAU,EAAd;AACAb,qBAASkB,UAAT,CAAoBJ,KAApB,CAA0B,qBAA1B,EAAiD,UAASK,GAAT,EAAciB,UAAd,EAA0BF,MAA1B,EAAkC;AAC/E,oBAAI,CAACf,GAAL,EAAU;AACN,wBAAIC,OAAOgB,WAAWhB,IAAtB;AACAP,4BAAQ,OAAR,IAAmB,CAAnB;AACAA,4BAAQ,MAAR,IAAkBO,IAAlB;AACAP,4BAAQ,WAAR,IAAuB,GAAvB;AACAF,4BAAQE,OAAR;AACA;AACH,iBAPD,MAOO;AACHA,4BAAQ,MAAR,IAAkB,eAAlB;AACAA,4BAAQ,WAAR,IAAuB,GAAvB;AACAD,2BAAOC,OAAP;AACA;AACH;AACJ,aAdD;AAeH,SAjBuB,CAAd;AAAA,K;;;kBAoBCN,S","file":"userModel.js","sourcesContent":["var database = require('./../../../../database/database');\r\nvar cors = require('cors')\r\nvar jwt = require('jsonwebtoken');\r\nprocess.env.SECRET_KEY = \"varunv\";\r\n\r\nclass UserModel {\r\n\r\n    executeQuery = (req) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            \"error\": 1,\r\n            \"data\": \"\",\r\n            \"status\":\"\",\r\n            \"dbData\":\"\",\r\n            \"fields\":\"\",\r\n            \"satusCode\":\"\"\r\n        };\r\n        var query = req.body.query;\r\n        console.log(\"query is \"+query);\r\n        database.connection.query(query, function(err, rows) {\r\n            if (!err) {\r\n                console.log(\"query executed successfully successfully \"+JSON.stringify(rows));\r\n                appData.error = 0;\r\n                appData[\"status\"] = \"success!\";\r\n                appData[\"satusCode\"] = 201;\r\n                appData[\"dbData\"] = rows;\r\n                resolve(appData)\r\n                //res.status(201).json(appData);\r\n            } else {\r\n                console.log(\"Query Exception \"+err);\r\n                appData[\"data\"] = \"Error Occured!\";\r\n                appData[\"satusCode\"] = 400;\r\n                appData[\"err\"] = err;\r\n                reject(appData)\r\n                //res.status(400).json(err);\r\n            }\r\n        });\r\n})\r\n\r\n\r\n    registerUser= (req, res) => new Promise((resolve, reject)=>{\r\n        var today = new Date();\r\n        var appData = {\r\n            \"error\": 1,\r\n            \"data\": \"\",\r\n            \"satusCode\":\"\",\r\n            \"dbResponse\":\"\"\r\n        };\r\n        var userData =[req.body.email, req.body.first_name, req.body.last_name, req.body.password, req.body.phoneNumber]\r\n        database.connection.query('insert into users(email,first_name,last_name,password, phonenumber) values ($1, $2, $3, $4, $5)', userData, function(err, rows, fields) {\r\n            if (!err) {\r\n                console.log(\"query is working fine \"+rows);\r\n                appData.error = 0;\r\n                appData[\"data\"] = \"User registered successfully!\";\r\n                appData[\"satusCode\"] = rows;\r\n                appData[\"dbResponse\"] = 201;\r\n                resolve(appData);\r\n                //res.status(201).json(appData);\r\n            } else {\r\n                console.log(\"got error \"+err)\r\n                appData[\"data\"] = \"Error Occured!\";\r\n                appData[\"satusCode\"] = 400;\r\n                appData.error = err;\r\n                reject(appData);\r\n                //res.status(400).json(err);\r\n            }\r\n        });\r\n    })\r\n\r\n    loginUser = (req, res) => new Promise((resolve, reject) => {\r\n        var appData = {\r\n            \"error\": 1,\r\n            \"data\": \"\",\r\n            \"satusCode\":\"\"\r\n        };\r\n        var email = req.body.email;\r\n        var password = req.body.password;\r\n        console.log(\"data is \"+JSON.stringify(req.body));\r\n        database.connection.query('SELECT * FROM owner WHERE email = $1', [email], function(err, dbResponse, fields) {\r\n            if (err) {\r\n                console.log(\"error is \");\r\n                console.log(err);\r\n                appData.error = 1;\r\n                appData[\"data\"] = \"Error Occured!\";\r\n                appData[\"error\"] = err;\r\n                appData[\"satusCode\"] = 400;\r\n                reject(appData);\r\n                //res.status(400).json(appData);\r\n            } else {\r\n                console.log(\"no error is \");\r\n                let rows = dbResponse.rows;\r\n                console.log(rows);\r\n                if (rows.length > 0) {\r\n                    console.log(\"rows.length is \");\r\n                    if (rows[0].password == password) {\r\n                        console.log(\"password match \");\r\n                        console.log(\"rows[0] \"+JSON.stringify(rows[0]));\r\n                        let token = jwt.sign(rows[0], process.env.SECRET_KEY, {\r\n                            expiresIn: 1440\r\n                        });\r\n                        appData.error = 0;\r\n                        appData.isAdmin = rows[0].isadmin;\r\n                        appData[\"token\"] = token;\r\n                        appData[\"satusCode\"] = 200;\r\n                        resolve(appData);\r\n                        //res.status(200).json(appData);\r\n                    } else {\r\n                        console.log(\"password not match \");\r\n                        appData.error = 1;\r\n                        appData[\"data\"] = \"Email and Password does not match\";\r\n                        appData[\"satusCode\"] = 204;\r\n                        reject(appData);\r\n                        //res.status(204).json(appData);\r\n                    }\r\n                } else {\r\n                    console.log(\"else \");\r\n                    appData.error = 1;\r\n                    appData[\"data\"] = \"Email does not exists!\";\r\n                    appData[\"satusCode\"] = 204;\r\n                    reject(appData);\r\n                    //res.status(204).json(appData);\r\n                }\r\n            }\r\n        });\r\n\r\n    });\r\n\r\n    getUser = (req, res) => new Promise((resolve, reject) => {\r\n        var appData = {};\r\n        database.connection.query('SELECT * FROM users', function(err, dbResponse, fields) {\r\n            if (!err) {\r\n                let rows = dbResponse.rows;\r\n                appData[\"error\"] = 0;\r\n                appData[\"data\"] = rows;\r\n                appData[\"satusCode\"] = 200;\r\n                resolve(appData);\r\n                //res.status(200).json(appData);\r\n            } else {\r\n                appData[\"data\"] = \"No data found\";\r\n                appData[\"satusCode\"] = 204;\r\n                reject(appData);\r\n                //res.status(204).json(appData);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nexport default UserModel;"]}